// Usage: ./gradlew runIntegrationTests -Pserver.host=<> -Pserver.port=<> -Pserver.username=<>, -Pserver.password=<>
// ./gradlew build will still compile Java, but not run the test task


ext {
	server_host = project.hasProperty('server.host') ? project.getProperty('server.host') : "undefined"
	server_port = project.hasProperty('server.port') ? project.getProperty('server.port') : -1
	username = project.hasProperty('server.username') ? project.getProperty('server.username') : "undefined"
	password = project.hasProperty('server.password') ? project.getProperty('server.password') : "undefined"
	server_test_directory = project.hasProperty('server.test.directory') ? project.getProperty('server.test.directory') : "undefined"
	test_version = project.hasProperty('test.version') ? project.getProperty('test.version') : "undefined"
}

dependencies {
    compile project(':data-sets-model')
    compile project(':data-sets-api-server')

    compile libraries.spring_boot_starter_actuator
    compile libraries.spring_boot_starter_parent
    compile libraries.spring_boot_starter_security
	compile libraries.spring_security_config
	compile libraries.spring_security_core
	compile libraries.spring_security_crypto
	compile libraries.spring_security_web
	compile libraries.spring_aop
	compile libraries.spring_beans
	compile libraries.spring_context
	compile libraries.spring_core
	compile libraries.spring_expression
	compile libraries.spring_web
	compile libraries.spring_webmvc
	compile libraries.spring_test
	implementation(libraries.spring_boot_starter_web){
		exclude group: "org.apache.tomcat.embed", module: "tomcat-embed-el"
	}
	compile libraries.tomcat_embed_el
    compile libraries.http_core
    compile libraries.http_client
    compile libraries.commons_codec
    compile libraries.gson
	compile libraries.snakeyaml
	compile libraries.tomcat_annotations_api
	compile libraries.tomcat_embed_core
	compile libraries.tomcat_embed_websocket
    compile libraries.lombok
    compile libraries.explorer_api_common
	compile libraries.restAssured

    testCompile libraries.spring_boot_starter_test
    testCompile libraries.powermock_api_mockito2
    testCompile libraries.power_mock_junit4
    testCompile libraries.power_mock_junit4_rule
    testCompile libraries.mockito_core
    testCompile libraries.explorer_api_common_test
    testCompile 'org.hamcrest:hamcrest-junit:2.0.0.0' //TODO testCompile libraries.hamcrest
}

test {
	systemProperty "server.host", server_host
	systemProperty "server.port", server_port
	systemProperty "server.username", username
	systemProperty "server.password", password
	systemProperty "server.test.directory", server_test_directory
	systemProperty "test.version", test_version

	reports.junitXml.destination = file(
		file(reports.junitXml.destination).getParent() + 
		"/test-" + 
		test_version
	)
	reports.html.destination = file(
		file(reports.html.destination).getParent() + 
		"/test-" + 
		test_version
	)
}

task validate {
	doLast {
		checkAndThrow("server_host", "undefined", "server.host");
		checkAndThrow("server_port", -1, "server.port");
		checkAndThrow("username", "undefined", "server.username");
		checkAndThrow("password", "undefined", "server.password");
		checkAndThrow("server_test_directory", "undefined", "server.test.directory");
		checkAndThrow("test_version", "undefined", "test.version");
	}
}	

task runIntegrationTests(dependsOn: ['validate', 'test']){

}

void checkAndThrow(String property, defaultValue, required=property) {
	if (ext.getProperty(property).equals(defaultValue)) {
		throw new GradleException("Missing the required property \'" + required + "\'.");
	}
}

gradle.taskGraph.whenReady { taskGraph -> 
	if (!taskGraph.hasTask(runIntegrationTests)) {
		def tasks = taskGraph.getAllTasks()
		tasks.findAll { it.name == 'test' }.each { task -> 
			if (task.getProject().getName() == 'data-sets-tests') {
		 		task.setEnabled(false) 
			}
		}
	}
} 


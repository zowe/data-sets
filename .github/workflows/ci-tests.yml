name: CI Testing

on:
  push:
    branches:
      - master
      - v2.x/master
  pull_request:
    branches:
      - master
      - v2.x/master
  workflow_dispatch:

env:
  MARIST_HOST: zzow01.zowe.marist.cloud
  MARIST_SSH_PORT: 22
  MARIST_TMP_DIRECTORY: /ZOWE/tmp
  MARIST_TEST_DIRECTORY: /ZOWE/tmp/${{ github.run_id }}_${{ github.run_number }}
  ZOSMF_PORT: 10443
  GATEWAY_PORT: 7554
  FILES_PORT: 8443
  FILES_LOG_DIR: .apiml/files-api.log

jobs:
  UnitTest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - uses: ./.github/actions/setup

      - name: Build with Gradle
        run: ./gradlew build

      - name: Unit test with Gradle
        run: ./gradlew coverage

      - name: Store test results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: UnitTestResults
          path: |
            build/reports/jacoco/jacocoFullReport/html
            data-sets-api-server/build/reports/tests/test

      - uses: ./.github/actions/teardown

  IntegrationTest:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - uses: ./.github/actions/setup

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run APIML containers
        run: |
          chmod +x scripts/run-containerized-apiml.sh
          ./scripts/run-containerized-apiml.sh
        env:
          ZOSMF_HOST: ${{ env.MARIST_HOST }}
          ZOSMF_PORT: ${{ env.ZOSMF_PORT }}
          GATEWAY_PORT: ${{ env.GATEWAY_PORT }}
          FILES_PORT: ${{ env.FILES_PORT }}
          HOST_OS: linux

      - name: Run Files API server
        run: >
          java -Xms16m -Xmx512m -Dibm.serversocket.recover=true -Dfile.encoding=UTF-8
          -Djava.io.tmpdir=/tmp
          -Dserver.port=${{ env.FILES_PORT }}
          -Dcom.ibm.jsse2.overrideDefaultTLS=true
          -Dserver.ssl.keyAlias=localhost
          -Dserver.ssl.keyStore=.apiml/keystore/localhost.keystore.p12
          -Dserver.ssl.keyStorePassword=password
          -Dserver.ssl.keyStoreType=PKCS12
          -Dconnection.httpsPort=${{ env.GATEWAY_PORT }}
          -Dconnection.ipAddress=localhost
          -jar data-sets-api-server/build/libs/data-sets-api-server-*-boot.jar > ${{ env.FILES_LOG_DIR }} &

      - name: Validate APIML setup
        run: |
          sleep 2m # let APIML finish setting up
          gwHealth=$(curl -k -sS https://localhost:${{ env.GATEWAY_PORT }}/application/health)
          echo $gwHealth
          gatewayUp=$(echo $gwHealth | awk -F{\"status\":\" '{print $2}' | awk -F\" '{print $1}')
          if [ "$gatewayUp" != "UP" ]; then
            echo ">>>>>Gateway is not up"
            exit 1
          fi

      - uses: zowe-actions/shared-actions/prepare-workflow@main

      - name: Lock marist server
        uses: zowe-actions/shared-actions/lock-resource@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

          lock-resource-name: files-integration-tests-${{ env.MARIST_HOST }}-lock
          lock-avg-retry-interval: 60

      - name: Prepare server side files
        run: |
          sshpass -e sftp -o BatchMode=no -o StrictHostKeyChecking=no -o PubkeyAuthentication=no -b - -P ${{ env.MARIST_SSH_PORT }} ${{ secrets.SSH_MARIST_USERNAMEL }}@${{ env.MARIST_HOST }} << EOF
            cd ${{ env.MARIST_TMP_DIRECTORY }}
            put scripts/prepare-integration-test-folders.sh
          EOF
          sshpass -e ssh -tt -o StrictHostKeyChecking=no -o PubkeyAuthentication=no -p ${{ env.MARIST_SSH_PORT }} ${{ secrets.SSH_MARIST_USERNAMEL }}@${{ env.MARIST_HOST }} << EOF
            cd ${{ env.MARIST_TMP_DIRECTORY }} && \
              (iconv -f ISO8859-1 -t IBM-1047 prepare-integration-test-folders.sh > prepare-integration-test-folders.sh.new) && mv prepare-integration-test-folders.sh.new prepare-integration-test-folders.sh && chmod +x prepare-integration-test-folders.sh
            ./prepare-integration-test-folders.sh "${{ env.MARIST_TEST_DIRECTORY }}_v1" || { echo "[prepare-integration-test-folders v1] failed"; exit 1; }
            ./prepare-integration-test-folders.sh "${{ env.MARIST_TEST_DIRECTORY }}_v2" || { echo "[prepare-integration-test-folders v2] failed"; exit 1; }
            echo "[prepare-integration-test-folders] succeeds" && exit 0
          EOF
        env:
          SSHPASS: ${{ secrets.SSH_MARIST_PASSWORDL }}

      - name: Integration tests for v1 - LTPA
        run: >
          ./gradlew runIntegrationTests --info
          -Pserver.host=localhost
          -Pserver.port=${{ env.GATEWAY_PORT }}
          -Pserver.username=${{ secrets.SSH_MARIST_USERNAMEL }}
          -Pserver.password=${{ secrets.SSH_MARIST_PASSWORDL }}
          -Pserver.test.directory=${{ env.MARIST_TEST_DIRECTORY }}_v1
          -Ptest.version=1

      - name: Integration tests for v2 - JWT
        run: >
          ./gradlew runIntegrationTests --info
          -Pserver.host=localhost
          -Pserver.port=${{ env.GATEWAY_PORT }}
          -Pserver.username=${{ secrets.SSH_MARIST_USERNAMEL }}
          -Pserver.password=${{ secrets.SSH_MARIST_PASSWORDL }}
          -Pserver.test.directory=${{ env.MARIST_TEST_DIRECTORY }}_v2
          -Ptest.version=2

      - name: Clean up integration test files # TODO implement this
        run: |
          echo "CLEANUP"

      - name: Output Files API logs
        if: always()
        run: >
          if [ -f ${{ env.FILES_LOG_DIR }} ]; then
            echo ">>>>>Files API logs"
            cat ${{ env.FILES_LOG_DIR }}
          else
            echo ">>>>>No Files API logs"
          fi

      - name: Output APIML logs
        if: always()
        run: docker-compose -f .apiml/docker-compose.yml logs

      - name: Store test results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: IntegrationTestResults
          path: |
            data-sets-tests/build/reports/tests/test-1
            data-sets-tests/build/reports/tests/test-2

      - uses: ./.github/actions/teardown

  SonarQubeScan:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - uses: ./.github/actions/setup
        with:
          jdkVersion: 11

      - name: Sonar scan with Gradle
        run: >
          ./gradlew compileJava compileTestJava sonarqube --info
          -x test
          -Psonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
          -Partifactory_user=$ARTIFACTORY_USERNAME -Partifactory_password=$ARTIFACTORY_PASSWORD
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - uses: ./.github/actions/teardown

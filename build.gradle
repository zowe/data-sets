import java.util.regex.Matcher

//noinspection GroovyAssignabilityCheck
group 'org.zowe.explorer.files'

buildscript {
    ext {
        licenseGradlePluginVerion = '0.14.0'
    }

    ext.mavenRepositories = {
        mavenLocal()
        maven {
            url artifactoryMavenSnapshotRepo
            credentials {
                username mavenUser
                password mavenPassword
            }
        }
        maven {
            url artifactoryMavenRepo
            credentials {
                username mavenUser
                password mavenPassword
            }
        }
    }

    repositories mavenRepositories

    dependencies {
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7'
        classpath 'net.researchgate:gradle-release:2.6.0'
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:${licenseGradlePluginVerion}"
        classpath 'org.owasp:dependency-check-gradle:3.3.4'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

apply from: 'gradle/publish.gradle'
apply from: 'gradle/sonar.gradle'
apply from: 'gradle/coverage.gradle'
apply from: 'gradle/versions.gradle'
apply from: 'gradle/code-quality.gradle'

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'org.owasp.dependencycheck'

    repositories mavenRepositories

    sourceCompatibility = 1.8
    version = version

    idea {
        module {
            //noinspection GroovyAssignabilityCheck
            outputDir file('build/classes/main')
            //noinspection GroovyAssignabilityCheck
            testOutputDir file('build/classes/test')
            downloadJavadoc = true
            downloadSources = true
        }
    }

    configurations.all {
        exclude group: 'org.glassfish', module: 'jakarta.el'
    }
}

subprojects {
    license {
        header rootProject.file('.license/LICENSE_HEADER')
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        excludes(["**/*.yml", "**/*.yaml", "**/*.json", "**/static", "**/*.sh", "**/*.txt", "**/*.p12", "**/*.xml", "**/*.jsp", "**/*.html", "**/*.jks"])
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
        skipExistingHeaders = true
    }

    tasks.withType(Test) {
        maxParallelForks = Runtime.runtime.availableProcessors()
    }

}

configurations {
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    all*.exclude group: 'com.fasterxml.jackson.module', module: 'jackson-module-kotlin'
}

task publishAllVersions {
    group 'Zowe Publishing'
    description 'Publish SDK libraries for all version of Spring Boot to Zowe Artifactory'
    doLast {
        println 'Published all versions of SDK'
    }
}

publishAllVersions.dependsOn publishArtifacts

//-----------Release part start
apply plugin: 'net.researchgate.release'

ext.releaseScope = project.hasProperty('release.scope') ? project.getProperty('release.scope') : 'patch'

release {
    failOnCommitNeeded = false
    failOnPublishNeeded = false
    failOnSnapshotDependencies = false
    failOnUnversionedFiles = false
    failOnUpdateNeeded = false
    revertOnFail = true
    preCommitText = '[Gradle Release plugin]'
    preTagCommitMessage = '[skip ci] Before tag commit'
    tagCommitMessage = 'Release:'
    tagTemplate = '${version}'
    newVersionCommitMessage = 'Create new version:'
    versionPropertyFile = 'gradle.properties'
    buildTasks = ['build']

    if (releaseScope == 'minor') {
        versionPatterns = [
            /[.]*\.(\d+)\.(\d+)[.]*/: { Matcher m, Project p -> m.replaceAll(".${(m[0][1] as int) + 1}.0") }
        ]
    } else if (releaseScope == 'major') {
        versionPatterns = [
            /(\d+)\.(\d+)\.(\d+)[.]*/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}.0.0") }
        ]
    } else {
        versionPatterns = [
            /(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
        ]
    }

    scmAdapters = [
        net.researchgate.release.GitAdapter
    ]

    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = false
        signTag = false
    }
}

afterReleaseBuild.dependsOn publishAllVersions
//-----------Release part end



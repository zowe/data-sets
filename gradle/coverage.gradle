apply plugin: 'jacoco'

ext.javaProjectsWithUnitTests = [
    'data-sets-api-server',
    'data-sets-tests',
    'data-sets-model'
]

ext.jacocoSubProjects = subprojects.findAll { it.name in javaProjectsWithUnitTests }

configure(jacocoSubProjects) {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'

    task instrument(dependsOn: [classes, project.configurations.jacocoAnt]) {
        inputs.files classes.outputs.files
        File outputDir = new File(project.buildDir, 'instrumentedClasses')
        outputs.dir outputDir
        doFirst {
            project.delete(outputDir)
            ant.taskdef(
                    resource: 'org/jacoco/ant/antlib.xml',
                    classpath: project.configurations.jacocoAnt.asPath,
                    uri: 'jacoco'
            )
            def instrumented = false
                if (file(sourceSets.main.java.outputDir).exists()) {
                    def instrumentedClassedDir = "${outputDir}/${sourceSets.main.java}"
                    ant.'jacoco:instrument'(destdir: instrumentedClassedDir) {
                        fileset(dir: sourceSets.main.java.outputDir, includes: '**/*.class')
                    }
                    //Replace the classes dir in the test classpath with the instrumented one
                    sourceSets.test.runtimeClasspath -= files(sourceSets.main.java.outputDir)
                    sourceSets.test.runtimeClasspath += files(instrumentedClassedDir)
                    instrumented = true
                }
            if (instrumented) {
                //Disable class verification based on https://github.com/jayway/powermock/issues/375
                test.jvmArgs += '-noverify'
            }
        }
    }
    test.dependsOn instrument

    jacoco {
        toolVersion = '0.8.3'
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.enabled true
            html.enabled true
        }
        afterEvaluate {
            executionData.setFrom(files(executionData.files.collect {
                fileTree(dir: it, exclude: 'jobs-tests/**')
            }))
        }
    }
}

task jacocoFullReport(type: JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(jacocoSubProjects.jacocoTestReport)

    getAdditionalSourceDirs().from(
            files(jacocoSubProjects.sourceSets.main.allSource.srcDirs)
    )

    getSourceDirectories().from(
            files(jacocoSubProjects.sourceSets.main.allSource.srcDirs)
    )

    getClassDirectories().from(
            files(jacocoSubProjects.sourceSets.main.output)
    )

    getExecutionData().from(
            files(jacocoSubProjects.jacocoTestReport.executionData)
    )

    reports {
        html.enabled = true
        xml.enabled = true
    }

    doFirst {
        getExecutionData().from(
                files(executionData.findAll { it.exists() })
        )
    }
}

task coverage() {
    dependsOn jacocoFullReport
}
